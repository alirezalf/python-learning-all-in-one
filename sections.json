{
"متغیرها": [
  {
    "title": "Variable assignment",
    "description": "متغیرها در پایتون برای ذخیره داده‌ها استفاده می‌شوند. می‌توانید نامی برای متغیر انتخاب کنید و مقدار دلخواه به آن اختصاص دهید.",
    "code": "x = 10\nname = 'Ali'\nprint('Number:', x)\nprint('Name:', name)"
  },
  {
    "title": "Basic data types",
    "description": "پایتون انواع داده زیادی دارد مانند عدد صحیح \n(int)\n، اعشاری \n(float)\n، رشته \n(str)\n و بولین \n(bool)",
    "code": "a = 5         # integer\nb = 3.14      # float\nc = 'Hello'   # string\nd = True      # boolean\nprint(type(a), type(b), type(c), type(d))"
  },
  {
    "title": "global",
    "description": "برای دسترسی به متغیر سراسری (global) داخل تابع استفاده می‌شود و اجازه تغییر آن را می‌دهد.",
    "code": "x = 5\ndef change():\n    global x\n    x = 10\nchange()\nprint(x)  # 10"
  },
  {
    "title": "nonlocal",
    "description": "برای دسترسی و تغییر متغیر در حوزه (enclosing scope) توابع تو در تو استفاده می‌شود.",
    "code": "def outer():\n    x = \"local\"\n    def inner():\n        nonlocal x\n        x = \"nonlocal\"\n    inner()\n    print(x)\nouter()  # nonlocal"
  },
  {
    "title": "del",
    "description": "برای حذف متغیر یا آیتم از لیست، دیکشنری و ... استفاده می‌شود.",
    "code": "x = 10\nprint(x)\ndel x\n# print(x)  # خطا چون x حذف شده\n\nlst = [1, 2, 3]\ndel lst[1]\nprint(lst)  # [1, 3]"
  }
],
"دستورات پایه": [
  {
    "title": "Print",
    "description": "اساسی‌ترین دستورات پایتون که در هر برنامه‌ای استفاده می‌شوند",
    "code": "print('Hello World!')"
  },
  {
    "title": "بررسی نوع داده",
    "description": "نوع داده را مشخص می‌کند",
    "code": "x = 10\nprint(type(x))  # <class 'int'>"
  },
  {
    "title": "طول رشته یا لیست",
    "description": "طول رشته را محاسبه می‌کند",
    "code": "s = 'Python'\nprint(len(s))  # 6"
  },
  {
    "title": "تولید دنباله اعداد",
    "description": "اعداد از صفر تا 4 را تولید می‌کند ولی خود عدد 5 را شامل نمی‌شود",
    "code": "numbers = list(range(5))\nprint(numbers)  # [0, 1, 2, 3, 4]"
  }
],
"دستور print": [
  {
    "title": "چاپ ساده",
    "description": "چاپ یک متن ساده در خروجی",
    "code": "print('Hello, World!')"
  },
  {
    "title": "چاپ مقدار متغیر",
    "description": "نمایش مقدار ذخیره‌شده در متغیر",
    "code": "name = 'Ali'\nprint(name)"
  },
  {
    "title": "چاپ چند مقدار",
    "description": "چاپ چند مقدار به صورت هم‌زمان با فاصله بین آن‌ها",
    "code": "x = 10\ny = 20\nprint('x:', x, 'y:', y)"
  },
  {
    "title": "استفاده از sep",
    "description": "تعیین جداکننده سفارشی بین مقادیر",
    "code": "print('2025', '05', '30', sep='-')  # خروجی: 2025-05-30"
  },
  {
    "title": "استفاده از end",
    "description": "تغییر کاراکتر پایان خط (به‌جای رفتن به خط بعد)",
    "code": "print('Loading', end='...')\nprint('Done')  # خروجی: Loading...Done"
  },
  {
    "title": "استفاده از f-string",
    "description": "قالب‌بندی رشته با استفاده از f-string",
    "code": "name = 'Ali'\nage = 25\nprint(f'Name: {name}, Age: {age}')"
  },
  {
    "title": "استفاده از format",
    "description": "قالب‌بندی رشته با استفاده از متد format",
    "code": "print('Name: {}, Age: {}'.format('Ali', 25))"
  },
  {
    "title": "چاپ کاراکتر newline",
    "description": "ایجاد خط جدید با استفاده از \\n",
    "code": "print('Line 1\\nLine 2')"
  },
  {
    "title": "چاپ با تب افقی",
    "description": "تنظیم فاصله با استفاده از \\t",
    "code": "print('Name:\\tAli')"
  },
  {
    "title": "چاپ لیست یا دیکشنری",
    "description": "چاپ مستقیم ساختارهای داده‌ای",
    "code": "numbers = [1, 2, 3]\nprint(numbers)\ninfo = {'name': 'Ali', 'age': 25}\nprint(info)"
  },
  {
    "title": "چاپ با یونیکد و ایموجی",
    "description": "نمایش حروف فارسی، یونیکد و ایموجی",
    "code": "print('Hello 😊 Python')"
  }
],
"توابع بررسی نوع": [
  {
    "title": "بررسی نوع شی",
    "description": "بررسی می‌کند که این داده از نوع شی مورد نظر است",
    "code": "print(isinstance(10, int))  # True"
  },
  {
    "title": "بررسی عددی بودن رشته",
    "description": "بررسی عددی بودن رشته با متدهای isdigit و isnumeric",
    "code": "print(\"123\".isdigit())      # True\nprint(\"۱۲۳\".isnumeric())    # True (اعداد فارسی)\nprint(\"abc\".isdigit())      # False"
  },
  {
    "title": "بررسی حروف الفبا",
    "description": "بررسی حروف الفبا، عددی یا فاصله بودن رشته",
    "code": "print(\"abc\".isalpha())  # True\nprint(\"abc123\".isalnum())  # True\nprint(\"   \".isspace())  # True (فقط فاصله)"
  }
],
"توابع ریاضی": [
  {
    "title": "مقدار مطلق",
    "description": "قدر مطلق",
    "code": "print(abs(-5))  # 5"
  },
  {
    "title": "گرد کردن",
    "description": "گرد کردن",
    "code": "print(round(3.14159, 2))  # 3.14"
  },
  {
    "title": "حداقل و حداکثر",
    "description": "مقدار مینیمم و ماکزیمم را برمی‌گرداند",
    "code": "print(min(3, 1, 4))  # 1\nprint(max(3, 1, 4))  # 4"
  },
  {
    "title": "جمع اعداد",
    "description": "مجموع اعداد داخل پرانتز را برمی‌گرداند",
    "code": "print(sum([1, 2, 3]))  # 6"
  },
  {
    "title": "توان",
    "description": "عدد اول پایه و عدد دوم توان می‌باشد",
    "code": "print(pow(2, 3))  # 8"
  },
  {
    "title": "any",
    "description": "اگر حداقل یکی از مقادیر داخل iterable مقدار True باشد، True برمی‌گرداند",
    "code": "print(any([False, True, False]))  # True\nprint(any([False, False, False]))  # False"
  },
  {
    "title": "all",
    "description": "اگر همه مقادیر داخل iterable مقدار True باشند، True برمی‌گرداند",
    "code": "print(all([True, True, True]))    # True\nprint(all([True, False, True]))   # False"
  }
],
"توابع کار با رشته": [
  {
    "title": "upper lower",
    "description": "تبدیل به حروف بزرگ/کوچک",
    "code": "s = \"  Hello World!  \"\nprint(s.upper())  #   HELLO WORLD!\nprint(s.lower())  #   hello world!"
  },
  {
    "title": "strip",
    "description": "حذف فاصله از دو طرف",
    "code": "s = '  Hello World!  '\nprint(s.strip())  # 'Hello World!'"
  },
  {
    "title": "split",
    "description": "تقسیم رشته",
    "code": "print('a,b,c'.split(','))  # ['a', 'b', 'c']"
  },
  {
    "title": "join",
    "description": "اتصال رشته‌ها",
    "code": "print('-'.join(['2023', '12', '31']))  # '2023-12-31'"
  },
  {
    "title": "replace",
    "description": "جایگزینی زیررشته",
    "code": "s = '  Hello World!  '\nprint(s.replace('World', 'Python'))  # '  Hello Python!  '"
  },
  {
    "title": "index",
    "description": "جستجو در رشته",
    "code": "s = '  Hello World!  '\nprint(s.find(\"World\"))  # 8\nprint(s.index(\"World\"))  # 8"
  }
],
"رشته‌ها و متدهای آن": [
  {
    "title": "تعریف رشته",
    "description": "رشته‌ها در پایتون با استفاده از نقل قول (' ') یا دابل نقل قول (\" \") تعریف می‌شوند.",
    "code": "s1 = 'Hello'\ns2 = \"Python\"\nprint(s1)\nprint(s2)"
  },
  {
    "title": "رشته‌های چند خطی",
    "description": "برای رشته‌های چند خطی می‌توانید از سه نقل قول (''' یا \"\"\") استفاده کنید.",
    "code": "multi_line = '''این یک\nرشته چند خطی\nاست.'''\nprint(multi_line)"
  },
  {
    "title": "الحاق رشته‌ها",
    "description": "رشته‌ها را می‌توان با عملگر + به هم چسباند.",
    "code": "first_name = 'Ali'\nlast_name = 'Alavi'\nfull_name = first_name + ' ' + last_name\nprint(full_name)"
  },
  {
    "title": "تکرار رشته‌ها",
    "description": "رشته‌ها را می‌توان با عملگر * تکرار کرد.",
    "code": "word = 'سلام'\nrepeated = word * 3\nprint(repeated)"
  },
  {
    "title": "دسترسی به کاراکترها",
    "description": "می‌توانید با استفاده از اندیس به کاراکترهای رشته دسترسی پیدا کنید.",
    "code": "s = 'Python'\nprint(s[0])  # اولین کاراکتر\nprint(s[-1]) # آخرین کاراکتر"
  },
  {
    "title": "برش زدن رشته",
    "description": "با استفاده از سینتکس [start:end:step] می‌توانید بخشی از رشته را جدا کنید.",
    "code": "s = 'Programming'\nprint(s[3:7])   # از اندیس 3 تا 7\nprint(s[::2])  # یک در میان\nprint(s[::-1]) # معکوس رشته"
  },
  {
    "title": "طول رشته",
    "description": "تابع len() طول رشته را برمی‌گرداند.",
    "code": "s = 'سلام دنیا'\nprint(len(s))"
  },
  {
    "title": "متدهای رشته",
    "description": "تبدیل به حروف بزرگ در رشته ، به حروف کوچک، حذف فاصله و جایگزینی در رشته",
    "code": "s = '  Hello World!  '\nprint(s.lower())      # حروف کوچک\nprint(s.upper())      # حروف بزرگ\nprint(s.strip())      # حذف فاصله از دو طرف\nprint(s.replace('H', 'J')) # جایگزینی\nprint(s.split())      # تقسیم رشته به لیست"
  },
  {
    "title": "قالب‌بندی رشته",
    "description": "قالب‌بندی رشته‌ها به چند روش امکان‌پذیر است.",
    "code": "name = 'Ali'\nage = 30\n# روش قدیمی\nprint('نام: %s، سن: %d' % (name, age))\n# روش format\nprint('نام: {}، سن: {}'.format(name, age))\n# f-string (روش جدید)\nprint(f'نام: {name}، سن: {age}')"
  },
  {
    "title": "کاراکترهای ویژه",
    "description": "کاراکترهای ویژه با بک‌اسلش (\\) شروع می‌شوند.",
    "code": "print('این یک خط جدید است.\\nاین خط دوم است.')\nprint('مسیر: C:\\\\Users\\\\Ali')"
  },
  {
    "title": "تبدیل به رشته",
    "description": "تبدیل انواع داده به رشته با تابع str()",
    "code": "num = 123\nprint('عدد: ' + str(num))"
  },
  {
    "title": "جستجو با find و index",
    "description": "متد find در صورت نبود مقدار، -1 برمی‌گرداند. اما index در صورت نبودن خطا می‌دهد.",
    "code": "s = \"Hello Python\"\nprint(s.find(\"Python\"))   # 6\nprint(s.index(\"Python\"))  # 6\n# print(s.index(\"Java\"))  # خطا می‌دهد چون وجود ندارد"
  },
  {
    "title": "چک کردن محتوای رشته",
    "description": "متدهایی برای بررسی محتوای رشته وجود دارد.",
    "code": "s1 = 'abc123'\ns2 = 'ABC'\nprint(s1.isalnum()) # آیا حروف و اعداد است؟\nprint(s2.isalpha()) # آیا فقط حروف است؟\nprint(s1.isdigit()) # آیا فقط اعداد است؟"
  },
  {
    "title": "ترکیب و تقسیم رشته",
    "description": "متدهای join() و split() برای ترکیب و تقسیم رشته‌ها",
    "code": "words = ['Python', 'is', 'awesome']\ncombined = ' '.join(words)\nprint(combined)\n\ns = 'one,two,three'\nparts = s.split(',')\nprint(parts)"
  },
  {
    "title": "ترجمه کاراکترها",
    "description": "متد translate() و maketrans() برای ترجمه کاراکترها",
    "code": "s = 'abc123'\ntable = str.maketrans('abc', 'ABC')\nprint(s.translate(table))"
  },
  {
    "title": "همراهی با Unicode",
    "description": "پایتون از Unicode پشتیبانی می‌کند.",
    "code": "print('سلام دنیا!')\nprint('\\u0627\\u06CC\\u0646 \\u06CC\\u06A9 \\u0645\\u062A\\u0646 \\u0641\\u0627\\u0631\\u0633\\u06CC \\u0627\\u0633\\u062A')"
  }
],
"عملگرها": [
  {
    "title": "(Arithmetic)عملگرهای حسابی",
    "description": "عملگرهای حسابی برای انجام عملیات ریاضی روی اعداد استفاده می‌شوند. نمونه‌ها: +، -، *، /، //، % و **",
    "code": "a = 10\nb = 3\nprint(\"جمع:\", a + b)\nprint(\"تفریق:\", a - b)\nprint(\"ضرب:\", a * b)\nprint(\"تقسیم:\", a / b)\nprint(\"تقسیم صحیح:\", a // b)\nprint(\"باقی‌مانده:\", a % b)\nprint(\"توان:\", a ** b)"
  },
  {
    "title": "(Comparison Operators)عملگرهای مقایسه‌ای",
    "description": "عملگرهای مقایسه‌ای برای مقایسه دو مقدار و بازگرداندن True یا False استفاده می‌شوند. نمونه‌ها: ==، !=، >، <، >=، <=",
    "code": "a = 5\nb = 10\nprint(\"a == b:\", a == b)\nprint(\"a != b:\", a != b)\nprint(\"a > b:\", a > b)\nprint(\"a < b:\", a < b)\nprint(\"a >= b:\", a >= b)\nprint(\"a <= b:\", a <= b)"
  },
  {
    "title": "(Logical Operators)عملگرهای منطقی",
    "description": "عملگرهای منطقی برای ترکیب شرط‌ها استفاده می‌شوند. نمونه‌ها: and، or، not",
    "code": "x = True\ny = False\nprint(\"x and y:\", x and y)\nprint(\"x or y:\", x or y)\nprint(\"not x:\", not x)"
  },
  {
    "title": "(Assignment Operators)عملگرهای انتساب",
    "description": "عملگرهای انتساب برای اختصاص مقدار به متغیرها استفاده می‌شوند. نمونه‌ها: =، +=، -=، *=، /=، //=، %=، **=، :=",
    "code": "x = 5\nprint(\"x =\", x)\nx += 3\nprint(\"x += 3:\", x)\nx *= 2\nprint(\"x *= 2:\", x)\nx //= 4\nprint(\"x //= 4:\", x)\nx %= 3\nprint(\"x %= 3:\", x)\nx **= 2\nprint(\"x **= 2:\", x)\n\n# استفاده از :=\nif (n := len([1, 2, 3])) > 2:\n    print(\"طول لیست بیشتر از 2 است:\", n)"
  },
  {
    "title": "(Membership Operators)عملگرهای عضویت",
    "description": "عملگرهای عضویت برای بررسی وجود یا عدم وجود یک مقدار در مجموعه‌ها استفاده می‌شوند. نمونه‌ها: in و not in",
    "code": "lst = [1, 2, 3, 4, 5]\nprint(\"3 in list:\", 3 in lst)\nprint(\"7 in list:\", 7 in lst)\nprint(\"7 not in list:\", 7 not in lst)"
  },
  {
    "title": "(Identity Operators)عملگرهای هویتی",
    "description": "عملگرهای هویتی برای بررسی اینکه دو متغیر به یک شی اشاره می‌کنند یا خیر. نمونه‌ها: is و is not",
    "code": "a = [1, 2, 3]\nb = a\nc = [1, 2, 3]\nprint(\"a is b:\", a is b)\nprint(\"a is c:\", a is c)\nprint(\"a is not c:\", a is not c)"
  },
  {
    "title": "(Bitwise Operators)عملگرهای بیتی",
    "description": "عملگرهای بیتی برای انجام عملیات روی بیت‌های اعداد صحیح استفاده می‌شوند. نمونه‌ها: &, |, ^, ~, <<, >>",
    "code": "a = 5       # 0101 in binary\nb = 3       # 0011 in binary\nprint(\"a & b:\", a & b)   # AND\nprint(\"a | b:\", a | b)   # OR\nprint(\"a ^ b:\", a ^ b)   # XOR\nprint(\"~a:\", ~a)         # NOT\nprint(\"a << 1:\", a << 1) # Left shift\nprint(\"a >> 1:\", a >> 1) # Right shift"
  },
  {
    "title": "عملگر انتساب با :=",
    "description": "استفاده از عملگر جدید := یا Walrus فقط در پایتون 3.8 به بالا پشتیبانی می‌شود و برای اختصاص مقدار درون شرط کاربرد دارد.",
    "code": "# از پایتون 3.8 به بالا\nif (n := len([1, 2, 3])) > 2:\n    print(\"طول لیست بیشتر از 2 است:\", n)"
  }
],
"لیست‌ها": [
    {
      "title": "List",
      "description": "شکل کلی لیست",
      "code": "lst = [1, 2, 3]"
    },
    {
      "title": "تعریف لیست",
      "description": "لیست‌ها در پایتون برای ذخیره مجموعه‌ای از مقادیر استفاده می‌شوند و قابل تغییر هستند.",
      "code": "my_list = [1, 2, 3, 'Python', 3.14]\nprint(my_list)"
    },
    {
      "title": "دسترسی به عناصر لیست",
      "description": "می‌توانید با استفاده از اندیس به عناصر لیست دسترسی پیدا کنید.",
      "code": "l = ['a', 'b', 'c', 'd', 'e']\nprint(l[0])   # اولین عنصر\nprint(l[-1])  # آخرین عنصر\nprint(l[1:4]) # برش لیست"
    },
    {
      "title": "تغییر عناصر لیست",
      "description": "لیست‌ها تغییرپذیر هستند و می‌توان عناصر آنها را تغییر داد.",
      "code": "lst = [1, 2, 3, 4]\nlst[0] = 10\nlst[1:3] = [20, 30]\nprint(lst)"
    },
    {
      "title": "ادغام و تکرار لیست",
      "description": "لیست‌ها را می‌توان ادغام و تکرار کرد.",
      "code": "l1 = [1, 2]\nl2 = [3, 4]\nprint(l1 + l2)  # ادغام\nprint(l1 * 3)   # تکرار"
    },
    {
      "title": "مرتب‌سازی لیست(Sort List)",
      "description": "لیست‌ها را می‌توان مرتب کرد.",
      "code": "lst = [3, 1, 4, 2, 6, 5]\nlst.sort()\nprint(lst)\n\nlst.sort(reverse=True)\nprint(lst)"
    },
    {
      "title": "لیست‌های تو در تو",
      "description": "لیست‌ها می‌توانند شامل لیست‌های دیگر باشند.",
      "code": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(matrix[1][2])"
    },
    {
      "title": "لیست‌های با درک مطلب",
      "description": "روشی مختصر برای ایجاد لیست‌ها.",
      "code": "squares = [x**2 for x in range(10)]\nprint(squares)\n\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\nprint(even_squares)"
    },
    {
      "title": "تبدیل رشته به لیست و بالعکس",
      "description": "می‌توان رشته‌ها را به لیست و برعکس تبدیل کرد.",
      "code": "s = 'Python'\nl = list(s)\nprint(l)\n\nl = ['P', 'y', 't', 'h', 'o', 'n']\ns = ''.join(l)\nprint(s)"
    },
    {
      "title": "Add to List",
      "description": "اضافه کردن به لیست",
      "code": "lst = [1, 2, 3]\nlst.append(4)\nprint(lst)  # [1, 2, 3, 4]"
    },
    {
      "title": "Extend List",
      "description": "گسترش لیست",
      "code": "lst = [1, 2, 3, 4]\nlst.extend([5, 6])\nprint(lst)  # [1, 2, 3, 4, 5, 6]"
    },
    {
      "title": "Insert to List",
      "description": "درج در موقعیت مشخص",
      "code": "lst = [1, 2, 3]\nlst.insert(0, 0)\nprint(lst)  # [0, 1, 2, 3]"
    },
    {
      "title": "Remove from List",
      "description": "remove یک مقدار خاص را حذف می‌کند. pop آخرین عنصر را حذف و بازمی‌گرداند.",
      "code": "lst = [1, 2, 3, 4, 5, 6]\nlst.remove(4)  # حذف عدد 4\nprint(lst)     # [1, 2, 3, 5, 6]\n\nlast = lst.pop()  # حذف آخرین عنصر و ذخیره در متغیر\nprint(\"عنصر حذف‌شده:\", last)\nprint(\"لیست بعد از pop:\", lst)"
    },
    {
      "title": "Revers List",
      "description": "معکوس کردن لیست",
      "code": "lst = [1, 2, 3, 4, 5, 6]\nlst.reverse()\nprint(lst)  # [6, 5, 4, 3, 2, 1]"
    }
  ],
  "تاپل‌ها": [
    {
      "title": "تعریف تاپل",
      "description": "تاپل‌ها شبیه لیست هستند اما تغییرناپذیرند.",
      "code": "my_tuple = (1, 2, 3, 'Python')\nprint(my_tuple)\nempty_tuple = ()\nsingle_tuple = (5,)  # توجه به کاما"
    },
    {
      "title": "ویژگی‌های تاپل",
      "description": "تاپل‌ها سریع‌تر از لیست هستند و برای داده‌های ثابت مناسبند.",
      "code": "t = (1, 2, 3)\nprint(len(t))\nprint(t.count(2))\nprint(t.index(3))"
    },
    {
      "title": "تاپل‌های تو در تو",
      "description": "تاپل‌ها می‌توانند شامل تاپل‌های دیگر باشند.",
      "code": "nested = ((1, 2), (3, 4))\nprint(nested[1][0])"
    },
    {
      "title": "تخصیص چندگانه با تاپل",
      "description": "با استفاده از تاپل می‌توان چند مقدار را به چند متغیر به‌صورت هم‌زمان اختصاص داد.",
      "code": "x, y, z = (1, 2, 3)\nprint(x, y, z)  # 1 2 3"
    },
    {
      "title": "تعویض مقادیر با تاپل",
      "description": "برای تعویض مقدار بین دو متغیر بدون نیاز به متغیر کمکی.",
      "code": "a, b = 10, 20\nprint(\"قبل از تعویض:\", a, b)\na, b = b, a\nprint(\"بعد از تعویض:\", a, b)"
    },
    {
      "title": "تاپل به عنوان کلید دیکشنری",
      "description": "تاپل‌ها می‌توانند به عنوان کلید دیکشنری استفاده شوند.",
      "code": "locations = {(35.68, 51.38): 'Tehran', (40.71, -74.00): 'New York'}\nprint(locations[(35.68, 51.38)])"
    }
  ],
  "مجموعه‌ها (ست‌ها)": [
    {
      "title": "تعریف مجموعه",
      "description": "مجموعه‌ها برای نگهداری مقادیر یکتا استفاده می‌شوند.",
      "code": "my_set = {1, 2, 3, 3, 4}\nprint(my_set)  # فقط یک 3 نمایش داده می‌شود"
    },
    {
      "title": "عملیات مجموعه",
      "description": "مجموعه‌ها از عملیات ریاضی مانند اجتماع، اشتراک و تفاضل پشتیبانی می‌کنند.",
      "code": "a = {1, 2, 3}\nb = {3, 4, 5}\nprint(a | b)  # اجتماع\nprint(a & b)  # اشتراک\nprint(a - b)  # تفاضل"
    },
    {
      "title": "متدهای مجموعه",
      "description": "remove در صورت نبودن عنصر خطا می‌دهد، ولی discard بدون خطا ادامه می‌دهد.",
      "code": "s = {1, 2}\ns.add(3)\ns.remove(1)  # این خطا می‌دهد اگر 1 نباشد\ns.discard(4)  # خطا نمی‌دهد اگر وجود نداشته باشد\nprint(s)"
    },
    {
      "title": "مجموعه‌های با درک مطلب",
      "description": "روشی مختصر برای ایجاد مجموعه‌ها.",
      "code": "s = {x for x in 'abracadabra' if x not in 'abc'}\nprint(s)"
    }
  ],
  "دیکشنری‌ها": [
    {
      "title": "Dictionery",
      "description": "شکل کلی دیکشری",
      "code": "d = {'name': 'Ali', 'age': 30}"
    },
    {
      "title": "تعریف دیکشنری",
      "description": "دیکشنری‌ها برای ذخیره داده‌های جفتی کلید-مقدار استفاده می‌شوند.",
      "code": "my_dict = {'name': 'Ali', 'age': 30, 'city': 'Tehran'}\nprint(my_dict)"
    },
    {
      "title": "دسترسی به مقادیر",
      "description": "مقادیر دیکشنری با کلیدهایشان قابل دسترسی هستند.",
      "code": "d = {'a': 1, 'b': 2}\nprint(d['a'])\nprint(d.get('c', 'Not Found'))"
    },
    {
      "title": "تغییر و اضافه کردن",
      "description": "دیکشنری‌ها تغییرپذیر هستند.",
      "code": "d = {'a': 1, 'b': 2}\nd['a'] = 10\nd['c'] = 3\nprint(d)"
    },
    {
      "title": "حذف عناصر",
      "description": "روش‌های مختلف برای حذف عناصر از دیکشنری.",
      "code": "d = {'a': 1, 'b': 2, 'c': 3}\ndel d['a']\nprint(d)\n\nprint(d.pop('b'))\nprint(d)"
    },
    {
      "title": "پیمایش دیکشنری",
      "description": "روش‌های مختلف برای پیمایش دیکشنری.",
      "code": "d = {'a': 1, 'b': 2, 'c': 3}\nfor key in d:\n    print(key)\nfor key, value in d.items():\n    print(f'{key}: {value}')"
    },
    {
      "title": "دیکشنری‌های تو در تو",
      "description": "دیکشنری‌ها می‌توانند شامل دیکشنری‌های دیگر باشند.",
      "code": "users = {\n    'user1': {'name': 'Ali', 'age': 30},\n    'user2': {'name': 'Reza', 'age': 25}\n}\nprint(users['user1']['name'])"
    },
    {
      "title": "دیکشنری‌های با درک مطلب",
      "description": "روشی مختصر برای ایجاد دیکشنری‌ها.",
      "code": "squares = {x: x**2 for x in range(5)}\nprint(squares)"
    },
    {
      "title": "ترکیب دیکشنری‌ها",
      "description": "روش‌های ترکیب دیکشنری‌ها در پایتون.",
      "code": "d1 = {'a': 1, 'b': 2}\nd2 = {'b': 3, 'c': 4}\ncombined = {**d1, **d2}\nprint(combined)"
    },
    {
      "title": "Key,value,item",
      "description": "دریافت کلیدها، مقادیر و جفت‌ها",
      "code": "d = {'name': 'Ali', 'age': 30}\nprint(d.keys())   # dict_keys(['name', 'age'])\nprint(d.values()) # dict_values(['Ali', 30])\nprint(d.items())  # dict_items([('name', 'Ali'), ('age', 30)])"
    },
    {
      "title": "Get Defult Value",
      "description": "دریافت مقدار با مقدار پیش‌فرض",
      "code": "d = {'name': 'Ali', 'age': 30}\nprint(d.get('name', 'Unknown'))  # Ali\nprint(d.get('city', 'Tehran'))  # Tehran"
    },
    {
      "title": "Update Dictionery",
      "description": "به‌روزرسانی دیکشنری",
      "code": "d = {'name': 'Ali', 'age': 30}\nd.update({'age': 31, 'city': 'Tehran'})\nprint(d)  # {'name': 'Ali', 'age': 31, 'city': 'Tehran'}"
    }
  ],
  "تبدیل بین انواع متغیر": [
    {
      "title": "تبدیل به عدد صحیح (int)",
      "description": "برای تبدیل به عدد صحیح از تابع int() استفاده می‌کنیم",
      "code": "x = int(3.14)    # تبدیل اعشاری به صحیح\ny = int('10')    # تبدیل رشته به صحیح\nz = int(True)   # تبدیل بولین به صحیح\nprint(x, y, z)"
    },
    {
      "title": "تبدیل به عدد اعشاری (float)",
      "description": "برای تبدیل به عدد اعشاری از تابع float() استفاده می‌کنیم",
      "code": "x = float(3)      # تبدیل صحیح به اعشاری\ny = float('3.14') # تبدیل رشته به اعشاری\nz = float(False) # تبدیل بولین به اعشاری\nprint(x, y, z)"
    },
    {
      "title": "تبدیل به رشته (str)",
      "description": "برای تبدیل به رشته از تابع str() استفاده می‌کنیم",
      "code": "x = str(10)      # تبدیل عدد به رشته\ny = str(3.14)    # تبدیل اعشاری به رشته\nz = str(True)   # تبدیل بولین به رشته\nprint(x, y, z)"
    },
    {
      "title": "تبدیل به بولین (bool)",
      "description": "برای تبدیل به بولین از تابع bool() استفاده می‌کنیم",
      "code": "x = bool(0)      # False\ny = bool(1)      # True\nz = bool('')     # False\nw = bool('text') # True\nprint(x, y, z, w)"
    },
    {
      "title": "تبدیل به لیست (list)",
      "description": "برای تبدیل به لیست از تابع list() استفاده می‌کنیم",
      "code": "x = list('hello')  # تبدیل رشته به لیست\ny = list((1,2,3))   # تبدیل تاپل به لیست\nz = list({1,2,3})   # تبدیل مجموعه به لیست\nprint(x, y, z)"
    },
    {
      "title": "تبدیل به تاپل (tuple)",
      "description": "برای تبدیل به تاپل از تابع tuple() استفاده می‌کنیم",
      "code": "x = tuple([1,2,3])  # تبدیل لیست به تاپل\ny = tuple('hello')   # تبدیل رشته به تاپل\nz = tuple({1,2,3})   # تبدیل مجموعه به تاپل\nprint(x, y, z)"
    },
    {
      "title": "تبدیل به مجموعه (set)",
      "description": "برای تبدیل به مجموعه از تابع set() استفاده می‌کنیم",
      "code": "x = set([1,2,2,3]) # تبدیل لیست به مجموعه\ny = set((1,2,3))    # تبدیل تاپل به مجموعه\nz = set('hello')   # تبدیل رشته به مجموعه\nprint(x, y, z)"
    },
    {
      "title": "تبدیل به دیکشنری (dict)",
      "description": "برای تبدیل به دیکشنری نیاز به داده‌های جفتی داریم",
      "code": "x = dict([('a',1),('b',2)])  # لیست تاپل‌های جفتی\ny = dict(a=1, b=2)           # آرگومان‌های کلیدی\nprint(x, y)"
    },
    {
      "title": "تبدیل بین اعداد و کاراکترها",
      "description": "استفاده از توابع ord() و chr() برای کار با کدهای ASCII",
      "code": "x = ord('A')  # تبدیل کاراکتر به کد عددی\ny = chr(65)  # تبدیل کد عددی به کاراکتر\nprint(x, y)"
    },
    {
      "title": "تبدیل به بایت‌ها (bytes)",
      "description": "برای تبدیل به بایت‌ها از تابع bytes() استفاده می‌کنیم",
      "code": "x = bytes([65,66,67])  # لیست اعداد به بایت\ny = b'ABC'             # لیترال بایت\nprint(x, y)"
    },
    {
      "title": "تبدیل رشته به لیست و بالعکس",
      "description": "تبدیل بین رشته و لیست با split() و join()",
      "code": "# تبدیل رشته به لیست\nwords = 'Python is great'.split() #['Python', 'is', 'great']\n\n# تبدیل لیست به رشته\ncombined = ' '.join(words)\n\nprint(words)\nprint(combined)"
    },
    {
      "title": "تبدیل عدد به مبنای مختلف",
      "description": "استفاده از توابع bin(), oct(), hex()",
      "code": "x = bin(10)   # به مبنای ۲\ny = oct(10)   # به مبنای ۸\nz = hex(10)   # به مبنای ۱۶\nprint(x, y, z)"
    },
    {
      "title": "تبدیل تاریخ و زمان به رشته",
      "description": "استفاده از متد strftime()",
      "code": "from datetime import datetime\nnow = datetime.now()\ndate_str = now.strftime('%Y-%m-%d %H:%M:%S')\nprint(date_str)"
    },
    {
      "title": "تبدیل JSON به دیکشنری و بالعکس",
      "description": "استفاده از ماژول json",
      "code": "import json # دیکشنری به JSON\n\ndata = {'name': 'Ali', 'age': 30}\n\njson_str = json.dumps(data) # JSON به دیکشنری\nnew_data = json.loads(json_str)\n\nprint(json_str)\nprint(new_data)"
    }
  ],
  "تبدیل بین انواع داده":[
    
        {
          "title": "تبدیل لیست به تاپل",
          "description": "برای تبدیل لیست به تاپل از تابع tuple() استفاده می‌کنیم.",
          "code": "my_list = [1, 2, 3, 4]\nmy_tuple = tuple(my_list)\nprint(my_tuple)\nprint(type(my_tuple))"
        },
        {
          "title": "تبدیل تاپل به لیست",
          "description": "برای تبدیل تاپل به لیست از تابع list() استفاده می‌کنیم.",
          "code": "my_tuple = (1, 2, 3, 4)\nmy_list = list(my_tuple)\nprint(my_list)\nprint(type(my_list))"
        },
        {
          "title": "تبدیل لیست به مجموعه",
          "description": "برای تبدیل لیست به مجموعه از تابع set() استفاده می‌کنیم. مقادیر تکراری حذف می‌شوند.",
          "code": "my_list = [1, 2, 2, 3, 4, 4, 4]\nmy_set = set(my_list)\nprint(my_set)\nprint(type(my_set))"
        },
        {
          "title": "تبدیل مجموعه به لیست",
          "description": "برای تبدیل مجموعه به لیست از تابع list() استفاده می‌کنیم.",
          "code": "my_set = {1, 2, 3, 4}\nmy_list = list(my_set)\nprint(my_list)\nprint(type(my_list))"
        },
        {
          "title": "تبدیل لیست به دیکشنری",
          "description": "برای تبدیل لیست به دیکشنری می‌توان از تابع dict() استفاده کرد، به شرطی که لیست شامل تاپل‌های جفتی باشد.",
          "code": "my_list = [('a', 1), ('b', 2), ('c', 3)]\nmy_dict = dict(my_list)\nprint(my_dict)\nprint(type(my_dict))"
        },
        {
          "title": "تبدیل دیکشنری به لیست",
          "description": "برای تبدیل دیکشنری به لیست می‌توان از متدهای items(), keys() یا values() استفاده کرد.",
          "code": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(list(my_dict.keys()))\nprint(list(my_dict.values()))\nprint(list(my_dict.items()))"
        },
        {
          "title": "تبدیل رشته به لیست",
          "description": "برای تبدیل رشته به لیست می‌توان از تابع list() یا متد split() استفاده کرد.",
          "code": "s = 'Python'\nprint(list(s))\n\ns = 'Hello World'\nprint(s.split())"
        },
        {
          "title": "تبدیل لیست به رشته",
          "description": "برای تبدیل لیست به رشته می‌توان از متد join() استفاده کرد.",
          "code": "my_list = ['Python', 'is', 'awesome']\nmy_str = ' '.join(my_list)\nprint(my_str)\nprint(type(my_str))"
        },
        {
          "title": "تبدیل دیکشنری به تاپل",
          "description": "می‌توانیم کلیدها یا مقادیر دیکشنری را به تاپل تبدیل کنیم.",
          "code": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nkeys_tuple = tuple(my_dict.keys())\nvalues_tuple = tuple(my_dict.values())\nprint(keys_tuple)\nprint(values_tuple)"
        },
        {
          "title": "تبدیل تاپل به دیکشنری",
          "description": "برای تبدیل تاپل به دیکشنری، معمولاً نیاز به تاپل‌های جفتی داریم.",
          "code": "my_tuple = (('a', 1), ('b', 2), ('c', 3))\nmy_dict = dict(my_tuple)\nprint(my_dict)"
        },
        {
          "title": "تبدیل مجموعه به تاپل",
          "description": "برای تبدیل مجموعه به تاپل از تابع tuple() استفاده می‌کنیم.",
          "code": "my_set = {1, 2, 3, 4}\nmy_tuple = tuple(my_set)\nprint(my_tuple)\nprint(type(my_tuple))"
        },
        {
          "title": "تبدیل تاپل به مجموعه",
          "description": "برای تبدیل تاپل به مجموعه از تابع set() استفاده می‌کنیم.",
          "code": "my_tuple = (1, 2, 2, 3, 4, 4)\nmy_set = set(my_tuple)\nprint(my_set)\nprint(type(my_set))"
        },
        {
          "title": "تبدیل دیکشنری به مجموعه",
          "description": "می‌توانیم کلیدها یا مقادیر دیکشنری را به مجموعه تبدیل کنیم.",
          "code": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nkeys_set = set(my_dict.keys())\nvalues_set = set(my_dict.values())\nprint(keys_set)\nprint(values_set)"
        },
        {
          "title": "تبدیل مجموعه تاپل به دیکشنری",
          "description": "برای تبدیل مجموعه به دیکشنری، باید داده‌ها به‌صورت کلید-مقدار باشند.",
          "code": "my_set = {('a', 1), ('b', 2), ('c', 3)}\nmy_dict = dict(my_set)\nprint(my_dict)  # {'a': 1, 'b': 2, 'c': 3}"
        }
  ],
  "شرط‌ها": [
    {
      "title": "Simple if",
      "description": "این ساختار ساده if است که اگر شرط درست بود، بلوک کد اجرا می‌شود.",
      "code": "x = 10\nif x > 5:\n    print(\"x is greater than 5\")"
    },
    {
      "title": "if ... else",
      "description": "با \nif ... else\n می‌توانیم در صورت درست نبودن شرط، کد دیگری را اجرا کنیم.",
      "code": "x = 3\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")"
    },
    {
      "title": "if ... elif ... else",
      "description": "با \nif ... elif ... else\n چند شرط را می‌توانیم پشت سر هم بررسی کنیم.",
      "code": "x = 7\nif x > 10:\n    print(\"x is greater than 10\")\nelif x > 5:\n    print(\"x is between 6 and 10\")\nelse:\n    print(\"x is less than or equal to 5\")"
    },
    {
      "title": "Nested if",
      "description": "در \nif\n تو در تو، یک شرط درون شرط دیگر قرار می‌گیرد.",
      "code": "x = 8\nif x > 5:\n    if x < 10:\n        print(\"x is between 6 and 9\")\n    else:\n        print(\"x is greater than or equal to 10\")\nelse:\n    print(\"x is less than or equal to 5\")"
    },
    {
      "title": "Compound conditions (and, or, not)",
      "description": "شرط‌های ترکیبی با استفاده از \nand، or و not\n برای ترکیب چند شرط استفاده می‌شوند: \n- and: همه شروط باید درست باشند\n- or: حداقل یکی از شروط درست باشد\n- not: معکوس شرط را بررسی می‌کند",
      "code": "x = 7\ny = 4\nif x > 5 and y < 10:\n    print(\"x is greater than 5 and y is less than 10\")\n\nif x < 5 or y == 4:\n    print(\"Either x is less than 5 or y equals 4\")\n\nif not x == 10:\n    print(\"x is not equal to 10\")"
    }
  ],
  "حلقه‌ها": [
    {
      "title": "حلقه for - تکرار روی لیست",
      "description": "حلقه for برای تکرار روی لیست‌ها و رشته‌ها استفاده می‌شود.",
      "code": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)"
    },
    {
      "title": "حلقه for - تکرار با range",
      "description": "برای تکرار روی اعداد در بازه مشخص از تابع range استفاده می‌کنیم.",
      "code": "for i in range(5):\n    print(i)  # چاپ اعداد 0 تا 4"
    },
    {
      "title": "حلقه for - range با شروع، پایان و گام دلخواه",
      "description": "تابع range می‌تواند سه آرگومان داشته باشد: شروع، پایان (غیرشامل) و گام.",
      "code": "for i in range(2, 10, 2):\n    print(i)  # چاپ 2, 4, 6, 8"
    },
    {
      "title": "حلقه for روی رشته",
      "description": "می‌توانیم روی تک‌تک کاراکترهای رشته با for تکرار کنیم.",
      "code": "for ch in \"Python\":\n    print(ch)"
    },
    {
      "title": "حلقه while - تکرار تا شرط برقرار است",
      "description": "تا زمانی که شرط True باشد، بدنه حلقه اجرا می‌شود.",
      "code": "count = 0\nwhile count < 5:\n    print(count)\n    count += 1"
    },
    {
      "title": "دستور break - خروج از حلقه",
      "description": "با دستور break می‌توان حلقه را زودتر از پایان معمولی متوقف کرد.",
      "code": "for i in range(10):\n    if i == 3:\n        break  # خروج از حلقه هنگام i=3\n    print(i)  # چاپ 0,1,2"
    },
    {
      "title": "دستور break در while",
      "description": "با break می‌توان حلقه while را زودتر متوقف کرد.",
      "code": "count = 0\nwhile True:\n    print(count)\n    count += 1\n    if count == 3:\n        break"
    },
    {
      "title": "دستور continue - رد کردن تکرار فعلی",
      "description": "continue باعث می‌شود بقیه دستورات حلقه برای آن دور اجرا نشود و به دور بعدی برود.",
      "code": "for i in range(5):\n    if i == 2:\n        continue  # عبور از i=2\n    print(i)  # چاپ 0,1,3,4"
    },
    {
      "title": "دستور continue در while",
      "description": "مانند for، در while هم باعث رد کردن ادامه حلقه برای آن دور می‌شود.",
      "code": "count = 0\nwhile count < 5:\n    count += 1\n    if count == 3:\n        continue\n    print(count)  # چاپ 1,2,4,5 (عدد 3 چاپ نمی‌شود)"
    },
    {
      "title": "else در حلقه for",
      "description": "اگر حلقه for بدون break کامل اجرا شود، else اجرا می‌شود.",
      "code": "for i in range(3):\n    print(i)\nelse:\n    print(\"حلقه کامل اجرا شد\")  # چون break نشد\n\nfor i in range(5):\n    if i == 3:\n        break\n    print(i)\nelse:\n    print(\"این چاپ نمی‌شود چون break انجام شد\")"
    },
    {
      "title": "else در حلقه while",
      "description": "مانند for، else زمانی اجرا می‌شود که حلقه با break قطع نشده باشد.",
      "code": "count = 0\nwhile count < 3:\n    print(count)\n    count += 1\nelse:\n    print(\"حلقه while کامل اجرا شد\")"
    },
    {
      "title": "حلقه تو در تو",
      "description": "می‌توان حلقه‌ها را داخل هم گذاشت برای مثال چاپ ماتریس یا ترکیب‌ها.",
      "code": "for i in range(3):\n    for j in range(2):\n        print(f\"i={i}, j={j}\")"
    },
    {
      "title": "استفاده از enumerate در حلقه for",
      "description": "با enumerate می‌توان به هر عنصر و اندیس آن در لیست دسترسی داشت.",
      "code": "fruits = ['apple', 'banana', 'cherry']\nfor index, fruit in enumerate(fruits):\n    print(index, fruit)"
    },
    {
      "title": "استفاده از zip در حلقه for",
      "description": "با zip می‌توان روی چند iterable به صورت همزمان تکرار کرد.",
      "code": "names = ['Ali', 'Sara', 'John']\nages = [25, 30, 22]\nfor name, age in zip(names, ages):\n    print(name, age)"
    }
  ],
  "توابع": [
    {
        "title": "Basic Function Definition",
        "description": "تعریف تابع بدون ورودی و خروجی.",
        "code": "def greet():\n    print('Hello!')\ngreet()"
    },
    {
        "title": "Functions with Parameters",
        "description": "تعریف تابع با پارامتر برای دریافت ورودی.",
        "code": "def greet(name):\n    print(f'Hello, {name}!')\ngreet('Ali')"
    },
    {
        "title": "Functions with Return Values",
        "description": "تابع مقداری را باز می‌گرداند.",
        "code": "def add(a, b):\n    return a + b\nprint(add(5, 7))"
    },
    {
        "title": "Default Parameters",
        "description": "پارامترهای پیش‌فرض در تابع.",
        "code": "def power(base, exp=2):\n    return base ** exp\nprint(power(3))\nprint(power(3, 3))"
    },
    {
        "title": "Keyword Arguments",
        "description": "استفاده از آرگومان‌های کلیدی هنگام فراخوانی تابع.",
        "code": "def describe_pet(animal_type, pet_name):\n    print(f'I have a {animal_type} named {pet_name}.')\ndescribe_pet(pet_name='Buddy', animal_type='dog')"
    },
    {
        "title": "Variable-length Arguments (*args)",
        "description": "تابع با تعداد آرگومان متغیر (موقعیتی).",
        "code": "def func(*args):\n    for arg in args:\n        print(arg)\nfunc(1, 2, 3)"
    },
    {
        "title": "Keyword Variable-length Arguments (**kwargs)",
        "description": "تابع با تعداد آرگومان کلیدی متغیر.",
        "code": "def func(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key} = {value}')\nfunc(name='Ali', age=25)"
    },
    {
        "title": "Nested Functions",
        "description": "تعریف تابع داخل تابع دیگر.",
        "code": "def outer():\n    def inner():\n        print('Hello from inner function')\n    inner()\nouter()"
    },
    {
        "title": "Recursive Functions",
        "description": "تابع بازگشتی که خودش را صدا می‌زند.",
        "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))"
    },
    {
        "title": "Lambda Functions",
        "description": "تابع ناشناس (لامبدا) برای کدهای کوتاه.",
        "code": "square = lambda x: x ** 2\nprint(square(6))"
    },
    {
        "title": "Function Decorators",
        "description": "تزئین‌کننده‌ها برای افزودن قابلیت به توابع.",
        "code": "def decorator(func):\n    def wrapper():\n        print('Before function call')\n        func()\n        print('After function call')\n    return wrapper\n\n@decorator\ndef say_hello():\n    print('Hello!')\nsay_hello()"
    },
    {
        "title": "Generator با yield",
        "description": "تابعی که از yield استفاده می‌کند، مقدار را برمی‌گرداند ولی حالت تابع را حفظ می‌کند.",
        "code": "def gen():\n    yield \"مرحله اول\"\n    yield \"مرحله دوم\"\n    yield \"مرحله سوم\"\n\nfor step in gen():\n    print(step)"
    },
    {
        "title": "Function Docstrings",
        "description": "متن مستندات تابع.",
        "code": "def add(a, b):\n    '''Returns the sum of a and b.'''\n    return a + b\nprint(add.__doc__)"
    },
    {
        "title": "Global and Local Variables",
        "description": "متغیرهای محلی و سراسری در توابع.",
        "code": "x = 'global'\ndef func():\n    x = 'local'\n    print('Inside:', x)\nfunc()\nprint('Outside:', x)"
    },
    {
        "title": "Returning Multiple Values",
        "description": "بازگرداندن چند مقدار به صورت تاپل.",
        "code": "def get_name_age():\n    return 'Ali', 30\nname, age = get_name_age()\nprint(name, age)"
    },
    {
        "title": "Advanced Lambda (filter, sorted)",
        "description": "استفاده از لامبدا با filter و sorted.",
        "code": "nums = [1, 2, 3, 4, 5]\nevens = list(filter(lambda x: x % 2 == 0, nums))\nsorted_nums = sorted(nums, key=lambda x: -x)\nprint(evens)\nprint(sorted_nums)"
    },
    {
        "title": "Higher-Order Functions",
        "description": "تابعی که تابع دیگری را می‌گیرد یا برمی‌گرداند.",
        "code": "def apply_func(f, value):\n    return f(value)\nprint(apply_func(lambda x: x**2, 5))"
    },
    {
        "title": "nonlocal Keyword",
        "description": "برای تغییر متغیر والد در توابع تو در تو.",
        "code": "def outer():\n    x = 'local'\n    def inner():\n        nonlocal x\n        x = 'nonlocal'\n    inner()\n    print(x)\nouter()"
    },
    {
        "title": "Error Handling in Functions",
        "description": "مدیریت خطاها داخل تابع با try-except.",
        "code": "def divide(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        return 'Cannot divide by zero'\nprint(divide(10, 2))\nprint(divide(10, 0))"
    },
    {
        "title": "Asynchronous Functions (async/await)",
        "description": "تابع‌های ناهمگام \n(async/await)\n برای اجرای عملیات غیرهمزمان.",
        "code": "async def say_hello():\n    await asyncio.sleep(1)\n    print('Hello after 1 second')\n\nasync def main():\n    await say_hello()\n\n# Run the async code\nasyncio.run(main())"
    }
],
"کار با فایل‌ها": [
    {
        "title": "خواندن از فایل",
        "description": "خواندن محتوای یک فایل متنی",
        "code": "with open('example.txt', 'r', encoding='utf-8') as f:\n    content = f.read()\nprint(content)"
    },
    {
        "title": "نوشتن در فایل",
        "description": "نوشتن محتوا در یک فایل متنی",
        "code": "with open('output.txt', 'w', encoding='utf-8') as f:\n    f.write('Hello, World!')"
    },
    {
        "title": "خواندن خط به خط",
        "description": "خواندن فایل خط به خط",
        "code": "with open('data.txt', 'r', encoding='utf-8') as f:\n    for line in f:\n        print(line.strip())"
    }
],
"ماژول‌ها و کتابخانه‌ها": [
    {
        "title": "ایجاد ماژول",
        "description": "ساخت یک ماژول ساده و استفاده از آن",
        "code": "# در فایل mymodule.py\ndef greet(name):\n    return f\"Hello, {name}\"\n\n# در فایل اصلی\nimport mymodule\nprint(mymodule.greet(\"Ali\"))"
    },
    {
        "title": "کتابخانه استاندارد",
        "description": "استفاده از ماژول‌های استاندارد پایتون",
        "code": "import math\nprint(math.sqrt(16))\n\nfrom datetime import date\nprint(date.today())"
    },
    {
        "title": "نصب پکیج",
        "description": "نصب پکیج با pip و استفاده از آن",
        "code": "# در خط فرمان:\n# pip install requests\n\nimport requests\nresponse = requests.get('https://api.escuelajs.co/api/v1/categories')\nprint(response.status_code)"
    }
],
"برنامه‌نویسی شی‌گرا": [
    {
        "title": "تعریف کلاس",
        "description": "ساخت یک کلاس ساده",
        "code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def greet(self):\n        return f\"Hello, my name is {self.name}\"\n\np = Person(\"Ali\", 30)\nprint(p.greet())"
    },
    {
        "title": "وراثت",
        "description": "استفاده از وراثت در کلاس‌ها",
        "code": "class Animal:\n    def __init__(self, name):\n        self.name = name\n    \n    def speak(self):\n        return \"Sound\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nd = Dog(\"Buddy\")\nprint(d.speak())"
    },
    {
        "title": "متدهای ویژه",
        "description": "استفاده از متدهای ویژه مانند __str__",
        "code": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    \n    def __str__(self):\n        return f\"{self.title} by {self.author}\"\n\nb = Book(\"Python\", \"Guido\")\nprint(b)"
    }
]
}